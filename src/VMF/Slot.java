package VMF;

/**
 * The VendingMachineFactory.Slot class represents a slot in an inventory system.
 */
public class Slot {

    /**
     * The item associated with the slot.
     */
    private final Item item;

    /**
     * The current quantity of the item in the slot.
     */
    private int quantity;

    /**
     * The previous quantity of the item in the slot (used for tracking changes in quantity).
     */
    private int previousQuantity;

    /**
     * The number of items sold from this slot.
     */
    private int itemSold_Slot = 0;

    /**
     * The revenue generated by this slot.
     */
    private float slotRevenue = 0;

    /**
     * The capacity of the slot, i.e., the maximum quantity of items that can be stored in the slot.
     */
    private final int capacity;

    /**
     * Constructs a new VendingMachineFactory.Slot object with the specified item, quantity, and capacity.
     *
     * @param item       the item associated with the slot
     * @param itemQuant  the initial quantity of the item in the slot
     * @param slotCap    the capacity of the slot
     */
    protected Slot(Item item, int itemQuant, int slotCap) {
        this.item = item;
        this.quantity = itemQuant;
        previousQuantity = itemQuant;
        this.capacity = slotCap;
    }

    /**
     * Returns the item associated with the slot.
     *
     * @return the item associated with the slot
     */
    public Item getItem() {
        return item;
    }

    /**
     * Returns the quantity of the item in the slot.
     *
     * @return the quantity of the item in the slot
     */
    public int getItemQuantity() {
        return quantity;
    }

    /**
     * Sets the quantity of the item in the slot.
     *
     * @param quantity the new quantity of the item in the slot
     */
    public void setItemQuantity(int quantity) {
        this.quantity = quantity;
    }

    /**
     * Dispenses an item from the slot by decreasing the quantity by 1.
     */
    public void dispenseItem() {
        quantity--;
    }

    /**
     * Returns the number of items sold from this slot.
     *
     * @return the number of items sold from this slot
     */
    public int getItemSold_Slot() {
        return itemSold_Slot;
    }

    /**
     * Increases the count of items sold from this slot by 1.
     */
    public void setItemSold_slot() {
        itemSold_Slot += 1;
    }

    /**
     * Returns the revenue generated by this slot.
     *
     * @return the revenue generated by this slot
     */
    public float getSlotRevenue() {
        return slotRevenue;
    }

    /**
     * Sets the revenue generated by this slot by adding the specified price sold.
     */
    public void setSlotRevenue() {
        slotRevenue += this.getItem().getPrice();
    }

    /**
     * Adds the specified quantity of items to the slot.
     *
     * @param addStock the quantity of items to add
     * @return true if the items were successfully added, false otherwise
     */
    public boolean addQuantity(int addStock) {
        boolean isAdded = false;
        if (addStock <= capacity - quantity) {
            quantity += addStock;
            previousQuantity = getItemQuantity();
            isAdded = true;
        } else {
            System.out.println("Cannot exceed capacity of slot. (maximum " + capacity + ")");
        }
        return isAdded;
    }

    /**
     * Returns the previous quantity of the item in the slot before any dispense or addition.
     *
     * @return the previous quantity of the item in the slot
     */
    public int getPreviousQuantity() {
        return previousQuantity;
    }
}
